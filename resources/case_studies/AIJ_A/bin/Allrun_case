#!/bin/bash
cd "${0%/*}" || exit                        
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions 

#------------------------------------------------------------------------------

# User parameters
n_proc=16       # Set number of processors for parallel computing
scale=0.25      # Set cells number scaling parameter
delta_t=0.05    # Set acquisition time of post-processing
start_time=2.0  # Set time to start averaging the solution (end of transient startup)
end_time=3.0    # Set time to end the simulation
smoothing=True  # Set to True if you want to smooth the mesh (requires cfmesh)

# Local folders
local_resources="resources"                       # Folder with resources
local_dicts="system"                              # Folder for local dictionaries
local_properties="constant"                       # Folder for local properties

#------------------------------------------------------------------------------
# Source utility functions

. ./Util_functions || {
    echo "Util_functions not found in current folder" >&2
    exit 1
}

#------------------------------------------------------------------------------
# Check if local directories are empty

for folder in "${local_dicts}" "${local_properties}"; do
    check_if_empty "$folder"
done

#------------------------------------------------------------------------------
# Copy source files and folders

resources=$(check_resources -r "${local_resources}")
read -r dicts_resources \
        data_resources \
        geometry_resources \
        properties_resources \
        functions_resources <<< ${resources}

declare -A files_to_copy=(
    ["${dicts_resources}/blockMeshDict"]="${local_dicts}/blockMeshDict"
    ["${dicts_resources}/topoSetDict"]="${local_dicts}/topoSetDict"
    ["${dicts_resources}/decomposeParDict"]="${local_dicts}/decomposeParDict"
    ["${dicts_resources}/fvSolution"]="${local_dicts}/fvSolution"
    ["${dicts_resources}/fvSchemes"]="${local_dicts}/fvSchemes"
    ["${dicts_resources}/controlDict"]="${local_dicts}/controlDict"
    ["${dicts_resources}/userDict"]="${local_dicts}/userDict"
    ["${properties_resources}/transportProperties"]="${local_properties}/transportProperties"
    ["${properties_resources}/turbulenceProperties"]="${local_properties}/turbulenceProperties"
)

for source in "${!files_to_copy[@]}"; do
    target="${files_to_copy[$source]}"
    copy_file_if_exists "$source" "$target"
done

cp -r ${functions_resources} "${local_dicts}/." || {
    echo "Error copying function objects to ${local_dicts} folder" >&2
    exit 1
}

cp -r "${data_resources}/boundaryData" "${local_properties}/." || {
    echo "Error copying boundary data to ${local_properties} folder" >&2
    exit 1
}

#------------------------------------------------------------------------------
# Make changes in files

protected_fos=(
    "FO_yPlus_4"
    "FO_sampleyPlus_5"
    "FO_residuals_6"
    "FO_fieldAverage_9"
    "FO_setMaxCo_16"
    "FO_setRelaxationFactors_17"
    "FO_setOuterCorrectors_18"
)

set_fos "${local_dicts}/function_objects"
set_acquisition_time $delta_t $start_time $end_time "${protected_fos[@]}"
set_scaling $scale "${local_dicts}/userDict"
set_parallel $n_proc "${local_dicts}/decomposeParDict"

#------------------------------------------------------------------------------
# Create the computation domain

./Allrun_pre ${smoothing}

#------------------------------------------------------------------------------
# Run the simulation and reconstruct the results

runApplication decomposePar
runParallel $(getApplication)
runApplication reconstructPar

#------------------------------------------------------------------------------
