/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
-------------------------------------------------------------------------------
Description
    Compute error associated with non-orthogonality of mesh
\*---------------------------------------------------------------------------*/

nonOrthoError
{
    name                calcGrad;
    type                coded;
    libs                (utilityFunctionObjects);
    timeStart           1.3;
    timeEnd             2.0;
    executeControl      runTime;
    executeInterval     0.05;
    writeControl        runTime;
    writeInterval       0.05;

    codeInclude
    #{
        #include        "emptyFvPatchField.H"
    #};

    codeExecute
    #{
        const volVectorField& Cc = mesh().C();
        volVectorField Cc2
        (
            IOobject
            (
                "Cc",
                mesh().time().timeName(),
                mesh(),
                IOobject::NO_READ
            ),
            mesh(),
            dimensionedVector(dimless/dimLength, Zero)
        );

        Cc2.primitiveFieldRef() = Cc.primitiveField();
        auto& bf = Cc2.boundaryFieldRef();

        forAll(bf, patchi)
        {
            fvPatchVectorField& pf = bf[patchi];

            if (!isA<emptyFvPatchField<vector>>(pf))
            {
                pf == Cc.boundaryField()[patchi];
            }
        }

        tmp<volTensorField> gradC = fvc::grad(Cc2);
        const word gradCName(gradC.cref().name());
        gradC->write();

        auto* errorPtr =
            mesh().getObjectPtr<volScalarField>("error");
        if (!errorPtr)
        {
            Info<< "Create error field" << nl;
            errorPtr = new volScalarField
            (
                IOobject
                (
                    "error",
                    mesh().time().timeName(),
                    mesh(),
                    IOobject::NO_READ,
                    IOobject::AUTO_WRITE,
                    IOobject::REGISTER
                ),
                mesh(),
                dimensionedScalar(dimless, Zero)
            );
            regIOobject::store(errorPtr);
        }
        auto& error = *errorPtr;
        Info<< "Computing error field\n" << endl;
        const dimensionedScalar root2(dimless/sqr(dimLength), Foam::sqrt(2.0));
        error = scalar(100)*(mag(gradC) - root2)/root2;
    #};
}

// ************************************************************************* //
