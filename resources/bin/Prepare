#!/bin/bash
###############################################################################
# Prepare  [--analysis] [--slurm] <case_name> <directoryName>
#
# • Build OpenFOAM folder for a single URANS simulation or comparative analysis
#   for a ready-to-run test case (<case_name>).
#   --> if --analysis then <caseFolder> is <case_name>/<directoryName>
#   --> else <caseFolder> is <case_name>/<directoryName>/setups.orig/common
#
# • Built OpenFOAM folder includes slurm scripts to run simulations withi slurm
#   workload manager.
#
# • Ready-to-run test cases are located in the resources/case_studies directory
#   and their structure must be as follows:
#   <case_name>/<resources-folder>
#   ├── README.md
#   ├── bin                         --> <caseFolder>/
#   │   ├── Allrun_case
#   │   ├── Allrun_pre
#   │   ├── Allclean_case
#   │   └── other scripts
#   ├── boundary_conditions
#   │   ├── 0.orig                  --> <caseFolder>/
#   │   └── boundaryData            --> <caseFolder>/constant/data
#   ├── data
#   │   └── expData.csv             --> <caseFolder>/resources/data
#   ├── dicts                       --> <caseFolder>/resources/dicts
#   │   ├── controlDict
#   │   :
#   │   └── fvSolution
#   ├── function_objects            --> <caseFolder>/resources/function_objects
#   │   ├── FO_example_0
#   │   ├── FO_example_1
#   │   :
#   │   └── FO_example_N
#   ├── geometry                    --> <caseFolder>/resources/geometry
#   │   ├── geometry_0.stl
#   │   ├── geometry_1.stl
#   │   :
#   │   └── geometry_M.stl
#   └── properties                  --> <caseFolder>/resources/properties
#       ├── transportProperties
#       :
#       └── turbulenceProperties
#
###############################################################################
#--- Safeguard ---#
set -euo pipefail

#--- Defaults ---#
MODE_ANALYSIS=false
MODE_SLURM=false
ROOT_DIR=$(git rev-parse --show-toplevel)
RESOURCES_DIR="${ROOT_DIR}/resources"
CASE_STUDIES_DIR="${RESOURCES_DIR}/case_studies"
BIN_DIR="${RESOURCES_DIR}/bin"
SLURM_DIR="${RESOURCES_DIR}/slurm"

CASE_RESOURCES="resources"
ALLRUN_ANALYSIS_SCRIPT="Allrun_analysis"
ZERO_FOLDER="0.orig"

#--- Usage Function ---#
usage() {
    local path
    if command -v realpath &>/dev/null; then
        path+=$(realpath --relative-to="$(pwd)" "${CASE_STUDIES_DIR}" 2>/dev/null)
    else
        path+=${CASE_STUDIES_DIR}
    fi

    cat <<EOF
    Usage: $0 [OPTIONS] <case_name> <directory>

    Prepare a case directory structure inside the given directory.

    Arguments:
        case_name           Name of ready-to-run test cases in 
                            '${path}'.
        directory           Parent directory where the case folder is created.

    Options:
        -a, --analysis      Enable analysis mode (default: off)
        -s, --slurm         Use slurm scripts (default: off)
        -t, --theoretical   Use theoretical boundary conditions instead of
                            experimental (default: experimental)
        -r, --resources     Change case resources directory (default:
                            <case_name>/resources)
        -h, --help          Show this help message and exit
EOF
}

# Parse arguments
parse_args() {
    local positional=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -a|--analysis)
                MODE_ANALYSIS=true
                shift
                ;;
            -s|--slurm)
                if [[ ${MODE_ANALYSIS} == false ]]; then
                    echo "Error: --slurm option" >&2
                    echo "  requires --analysis to be enabled." >&2
                    exit 1
                else
                    MODE_SLURM=true
                    ALLRUN_ANALYSIS_SCRIPT="Allsubmit_analysis"
                fi
                shift
                ;;
            -t|--theoretical)
                ZERO_FOLDER+=".theoretical"
                shift
                ;;
            -r|--resources)
                if [[ -z "$2" ]]; then
                    echo "Error: --resources option requires an argument." >&2
                    exit 1
                fi
                CASE_RESOURCES+="_$2"
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            -*)
                echo "Unknown option: $1"
                usage
                exit 0
                ;;
            *)
                positional+=("$1")
                shift
                ;;
        esac
    done

    if [[ -z ${ROOT_DIR} ]]; then
        echo "Error: we are not in a git repository." >&2
        exit 1
    fi

    if [[ ${#positional[@]} -ne 2 ]]; then
        echo "Error: Expected exactly two arguments, got ${#positional[@]}." >&2
        usage
        exit 1
    fi

    # Functions arguments
    case_name="${positional[0]}"
    dir="${positional[1]}"
    case_folder="${case_name}/${dir}"
    case_reference="${CASE_STUDIES_DIR}/${case_name}"

    if [[ -d ${case_folder} ]]; then
        echo "Error: Case folder '${case_folder}' already exists." >&2
        exit 1
    fi
}


#--- Validate input argument ---#
validate_case_name() {
    if [[ ! -d "$CASE_STUDIES_DIR" ]]; then
        echo "Error: '$CASE_STUDIES_DIR' does not exist." >&2
        exit 1
    fi

    local available_cases
    mapfile -t available_cases < <(find "$CASE_STUDIES_DIR" -mindepth 1 \
        -maxdepth 1 -type d -printf '%f\n' | sort)

    if [[ ! " ${available_cases[*]} " =~ " ${case_name} " ]]; then
        echo "Error: Case '${case_name}' does not exist in '$CASE_STUDIES_DIR'." >&2
        echo "Available cases:" >&2
        for name in "${available_cases[@]}"; do
            echo "  - $name" >&2
        done
        exit 1
    fi
}

#--- main function ---#
prepare() {
    #--- create main case folder ---#

    # reference folder with sanity check
    local reference="${case_reference}/${CASE_RESOURCES}"

    if [[ ! -d ${reference} ]]; then
        echo "Error: Reference folder '${reference}' does not exist." >&2
        exit 1
    fi

    # make subdirectories
    local constant_folder="${case_folder}/constant"
    local system_folder="${case_folder}/system"
    local resources_folder="${case_folder}/resources"

    mkdir -p "${constant_folder}"
    mkdir -p "${system_folder}"
    mkdir -p "${resources_folder}"

    # copy executable scripts to case folder
    cp "${BIN_DIR}/Util_functions" "${case_folder}/."
    cp "${reference}/bin/"* "${case_folder}/."

    # copy files from case reference to specific case folders
    cp -r "${reference}/boundary_conditions/${ZERO_FOLDER}" "${case_folder}/0.orig"

    # copy files from case reference to resources folder
    cp -r "${reference}/dicts" "${resources_folder}/."
    cp -r "${reference}/geometry" "${resources_folder}/."
    cp -r "${reference}/properties" "${resources_folder}/."
    cp -r "${reference}/function_objects" "${resources_folder}/."
    cp -r "${reference}/data" "${resources_folder}/."
    cp -r "${reference}/boundary_conditions/boundaryData" "${resources_folder}/data/."

    echo "+--- Created case folder"

    #--- create analysis folder embedding case folder ---#
    if [[ $MODE_ANALYSIS == true ]]; then
        local setups_folder="${case_folder}/setups.orig"
        local resource_folder="${case_folder}/resources"
        local temp_folder="temp"
        mv "${case_folder}" ${temp_folder}
        
        # make subdirectories
        mkdir -p "${setups_folder}"
        mkdir -p "${resource_folder}"

        # move case folder to setups.orig/common and copy data to resources
        cp -r "${temp_folder}/resources/data" "${resource_folder}/."
        mv "${temp_folder}" "${setups_folder}/common"

        # copy executable scripts to analysis folder
        cp "${BIN_DIR}/${ALLRUN_ANALYSIS_SCRIPT}" "${case_folder}/."
        cp "${BIN_DIR}/Allclean_analysis" "${case_folder}/."

        # add slurm scripts if requested
        if [[ $MODE_SLURM == true ]]; then
            cp "${SLURM_DIR}/"* "${case_folder}/."
        fi

        echo "+--- Created analysis folder"
    fi
}

#--- Entry point ---#
main() {
    parse_args "$@"
    echo "Validating case name '${case_name}'..."
    validate_case_name
    echo "Preparing case directory structure for ${case_name} in ${dir}..."
    prepare
    echo "+--- Completed"
}

#--- Execute ---#
main "$@"

